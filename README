Programmieren: Projektsetup ‚ÄûDas 2D-Spielbrett und die Spielfigur‚Äú
Gehe jeden Schritt durch und implementiere jeweils nur den aktuellen Schritt des TDD-Zyklus!
Deine Aufgabe ist es, ein einfaches 2D-Spielbrett und eine Spielfigur zu entwickeln. Das Spielfeld ist ein Raster, auf dem du dich mit den Tasten W (hoch), S (runter), D (rechts) und A (links) bewegen kannst. Schreibe Tests, um sicherzustellen, dass sich die Spielfigur korrekt auf dem Spielfeld bewegt.

Programmieren: Ersten Test schreiben (getX)
Im ersten Schritt sollst du keinen Produktionscode in src/main/java schreiben, sondern nur Tests in src/test/java.

Schreibe einen Test, der sicherstellt, dass die Methode getX in der Klasse PlayerCharacter den Wert 0 zur√ºckgibt.
Die Spielfigur sollte zu Beginn immer in der Mitte des Spielfeldes positioniert sein.
F√ºhre den Test aus ‚Äì er sollte jetzt rot sein (Kompilierungsfehler, nicht ausf√ºhrbar).
Grund:

Die Klasse PlayerCharacter existiert noch nicht.
Die Methode getX existiert noch nicht.
Es wurde noch nichts implementiert.
Programmieren: Minimale Implementierung
Implementiere nun die Klasse PlayerCharacter und die Methode getX.
F√ºhre den Test aus ‚Äì er sollte jetzt gr√ºn sein.
Committe und pushe deine √Ñnderungen.
Programmieren: Refactoring?
Wahrscheinlich gibt es an diesem Punkt noch keine Optimierungsm√∂glichkeiten. Falls doch, f√ºhre sie durch und pushe die √Ñnderungen.

Programmieren: Zweiter Test (getY)
Schreibe einen zweiten Test, der √ºberpr√ºft, ob die Methode getY den Wert 0 zur√ºckgibt.
F√ºhre den Test aus ‚Äì er sollte jetzt rot sein.
Programmieren: Zweite minimale Implementierung
Implementiere nun die Methode getY, sodass der Test bestanden wird.
Programmieren: Dritter Test (move W)
Schreibe einen Test, der √ºberpr√ºft, ob die Methode move("W") die Spielfigur um eine Position nach oben bewegt.
Die Methode sollte ein Array [0,1] ([x,y]) zur√ºckgeben.
Noch keine √Ñnderungen in src/main/java vornehmen!
Programmieren: Dritte minimale Implementierung (move W)
Implementiere nun die move-Methode, sodass der Test bestanden wird.
Committe und pushe deine √Ñnderungen.
Programmieren: Zus√§tzliche Tests und Implementierungen
Folge weiter strikt dem TDD-Zyklus:

Schreibe einen einzelnen Test
Stelle sicher, dass der Test fehlschl√§gt
Implementiere minimalen Code, um den Test zu bestehen
Committe und pushe den Code
Falls m√∂glich, Refactoring durchf√ºhren und ggf. erneut committen
Implementiere nacheinander folgende Bewegungen:

move S (runter)
move D (rechts)
move A (links)
‚ö† Achtung:
Alle Tests verwenden dieselben x- und y-Werte, was zu Fehlern f√ºhren kann.
Nutze @BeforeEach, um vor jedem Test die Werte auf 0 zur√ºckzusetzen.

Bonus: Fibonacci
Implementiere eine Methode zur Berechnung der n-ten Fibonacci-Zahl mithilfe von TDD:

Die Fibonacci-Folge beginnt mit 0, 1 und setzt sich fort mit 1, 2, 3, 5, 8, 13, 21, ‚Ä¶
Schreibe zuerst einen Test f√ºr die Fibonacci-Methode (z. B. n=0 oder n=1).
Implementiere die Funktion so, dass der erste Test bestanden wird.
Schreibe zus√§tzliche Tests f√ºr verschiedene F√§lle.
Optimiere die Implementierung, sodass alle Tests erfolgreich sind.
Teilt euch die Aufgaben auf und postet euer GitHub-Repository mit der L√∂sung!

Bonus: Negative und Gleitkommazahlen
Falls du noch Zeit hast: Implementiere eine Fibonacci-Funktion, die negative und Gleitkommazahlen ber√ºcksichtigt.

Bonus: Codewars
Codewars ist eine gro√üartige Plattform f√ºr algorithmische Herausforderungen.

Einer von euch sollte ein Konto auf Codewars erstellen.
W√§hlt gemeinsam eine einfache Java-Aufgabe.
L√∂st die Aufgabe nach dem TDD-Prinzip.
Tretet unserem Clan @neuefische bei, um euch mit anderen Teilnehmern zu messen! üöÄ